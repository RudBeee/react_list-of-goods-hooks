{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","sortType","setValue","isReversed","setReversed","visibleGoods","sort","good1","good2","localeCompare","length","reverse","isStartArray","toString","buttonReset","type","className","onClick","e","currentTarget","classList","toggle","map","good","ReactDOM","render","document","getElementById"],"mappings":"+NAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAA6BC,mBAAS,GAAtC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KAOMC,EAAY,UAAOP,GAEzBO,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQP,GACN,KAAK,EACH,OAAOM,EAAME,cAAcD,GAC7B,KAAK,EACH,OAAOD,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAITP,GACFE,EAAaM,UAGf,IAAMC,EACFd,EAAgBe,aAAeR,EAAaQ,WAE1CC,EACJ,wBACEC,KAAK,SACLC,UAAU,4BAEVC,QAAS,kBAAOf,EAAS,GAAIE,GAAY,IAJ3C,mBAUF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAS,yBAAiC,IAAbf,EAAiB,GAAK,YACnDgB,QAAS,kBAAOf,EAAS,IAH3B,iCAQA,wBACEa,KAAK,SACLC,UAAS,4BAAoC,IAAbf,EAAiB,GAAK,YACtDgB,QAAS,kBAAOf,EAAS,IAH3B,4BAQA,wBACEa,KAAK,SACLC,UAAS,4BAAuBb,EAAa,GAAK,YAClDc,QA1DQ,SAACC,GACfA,EAAEC,cAAcC,UAAUC,OAAO,YACjCjB,GAAaD,IAqDT,qBAQES,EAAe,GAAKE,KAIxB,6BACE,6BACGT,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cCxFrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3d4091c0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [sortType, setValue] = useState(0);\n  const [isReversed, setReversed] = useState(false);\n\n  const reverse = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.currentTarget.classList.toggle('is-light');\n    setReversed(!isReversed);\n  };\n\n  const visibleGoods = [...goodsFromServer];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case 1:\n        return good1.localeCompare(good2);\n      case 2:\n        return good1.length - good2.length;\n      default:\n        return 1;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  const isStartArray\n    = goodsFromServer.toString() === visibleGoods.toString();\n\n  const buttonReset = (\n    <button\n      type=\"button\"\n      className=\"button is-danger is-light\"\n      // eslint-disable-next-line no-sequences\n      onClick={() => (setValue(0), setReversed(false))}\n    >\n      Reset\n    </button>\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType === 1 ? '' : 'is-light'}`}\n          onClick={() => (setValue(1))}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType === 2 ? '' : 'is-light'}`}\n          onClick={() => (setValue(2))}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        { isStartArray ? '' : buttonReset}\n\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}